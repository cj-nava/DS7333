acf(params$res, lag.max = 60, main="ACF of Residuals")
ljung.wge(params$res, p = 3, q = 1)  # pval is > 0.05 and fails to reject the null hypothesis
# second check with different K-value
ljung.wge(params$res, p = 3, q = 1, K = 48)  # pval is > 0.05 and fails to reject the null hypothesis
f = fore.aruma.wge(ts.log_flu,
phi=params$phi,
theta=params$theta,
n.ahead = 52,
lastn = TRUE,
plot=TRUE,
limits=TRUE)
#Code from Prof. Sadler's Time Series Course Unit 7
#Model 1
phis = params$phi
thetas = params$theta
s  = 0
d  = 0
trainingSize = 130 # this is the window size (we used a window of 2.5 years or 130 weeks)
total_number_of_observations = 260
horizon = 2 # we forecast out 2 weeks
ASEHolder.2_weeks = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon, plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.2_weeks[i] = ASE
}
mean_windowed_ASE.2_weeks = mean(ASEHolder.2_weeks)
median_windowed_ASE.2_weeks = median(ASEHolder.2_weeks)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(2-week forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.2_weeks, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 4 # we forecast out 1 months, or 4 weeks
ASEHolder.4_weeks = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.4_weeks[i] = ASE
}
mean_windowed_ASE.4_weeks = mean(ASEHolder.4_weeks)
median_windowed_ASE.4_weeks = median(ASEHolder.4_weeks)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(4-week forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.4_weeks, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 12 # we forecast out 3 months, or 12 weeks
ASEHolder.3_months = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.3_months[i] = ASE
}
mean_windowed_ASE.3_months = mean(ASEHolder.3_months)
median_windowed_ASE.3_months = median(ASEHolder.3_months)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(3-month forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.3_months, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 26 # we forecast out 6 months, or 26 weeks
ASEHolder.6_months = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.6_months[i] = ASE
}
mean_windowedASE.6_months = mean(ASEHolder.6_months)
median_windowedASE.6_months = median(ASEHolder.6_months)
# visualization of windowed ASE over time
newASE = c(rep(NA, 131), ASEHolder.6_months) # this plots ASE from week 131 onward
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(6-month forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.6_months, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
forecast_horizon <- c("2 weeks", "4 weeks", "3 months", "6 months")
mean_rolling_window_ASE<- c(mean_windowed_ASE.2_weeks,mean_windowed_ASE.4_weeks, mean_windowed_ASE.3_months, mean_windowedASE.6_months)
median_rolling_window_ASE <- c(median_windowed_ASE.2_weeks, median_windowed_ASE.4_weeks, median_windowed_ASE.3_months, median_windowedASE.6_months)
rolling.window.ASE <- data.frame(forecast_horizon, mean_rolling_window_ASE, median_rolling_window_ASE)
formattable(rolling.window.ASE, digits = 4, format = "f")
glimpse(ts.log_flu)
library(rmdformats)
library(tidyverse)     # data manipulaiton
library(data.table)
library(tswge)         # Time series package
library(tseries)       # for Dickey-Fuller test
library(orcutt)        # for Cochrane-Orcutt test
library(formattable)   # for table formatting
knitr::opts_chunk$set(echo = TRUE,
prompt = FALSE,
tidy = TRUE,
comment = NA,
message = FALSE,
warning = FALSE)
# create a smaller sample using only the most recent five years of data (most recent 260 weeks)
most_recent_5_years.flu_percent_positive_cases <- FluNetReport %>%
slice(tail(row_number(), 260))
# convert to time series object
ts_most_recent_5_years.flu_percent_positive_cases <- ts(most_recent_5_years.flu_percent_positive_cases[ ,5], start=2010, frequency = 52)
# Check for trend using Cochrane-Orcutt
df <- most_recent_5_years.flu_percent_positive_cases[,c(2,5)]
x <- ts_most_recent_5_years.flu_percent_positive_cases
t = seq(1,260,1)
fit = lm(x~t, data = df)
# Cochrane-Orcutt test
cfit = cochrane.orcutt(fit)
summary(cfit)
View(most_recent_5_years.flu_percent_positive_cases)
glimpse(log_data)
# Check for trend using Cochrane-Orcutt
df <- log_data[,c(2,6)]
x <- ts.log_flu
t = seq(1,260,1)
fit = lm(x~t, data = df)
# Cochrane-Orcutt test
cfit = cochrane.orcutt(fit)
summary(cfit)
glimpse(most_recent_5_years.flu_percent_positive_cases)
formattable(invisible(aic5.wge(ts.log_flu, type = 'aic')))
formattable(invisible(aic5.wge(ts.log_flu, type = 'bic')))
params <- est.arma.wge(ts.log_flu, p=3, q=1)
# check residuals for white noise
plotts.sample.wge(params$res)
acf(params$res, lag.max = 60, main="ACF of Residuals")
ljung.wge(params$res, p = 3, q = 1)  # pval is > 0.05 and fails to reject the null hypothesis
# second check with different K-value
ljung.wge(params$res, p = 3, q = 1, K = 48)  # pval is > 0.05 and fails to reject the null hypothesis
f = fore.aruma.wge(ts.log_flu,
phi=params$phi,
theta=params$theta,
n.ahead = 52,
lastn = TRUE,
plot=TRUE,
limits=TRUE)
#Code from Prof. Sadler's Time Series Course Unit 7
#Model 1
phis = params$phi
thetas = params$theta
s  = 0
d  = 0
trainingSize = 130 # this is the window size (we used a window of 2.5 years or 130 weeks)
total_number_of_observations = 260
horizon = 2 # we forecast out 2 weeks
ASEHolder.2_weeks = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon, plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.2_weeks[i] = ASE
}
mean_windowed_ASE.2_weeks = mean(ASEHolder.2_weeks)
median_windowed_ASE.2_weeks = median(ASEHolder.2_weeks)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(2-week forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.2_weeks, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 4 # we forecast out 1 months, or 4 weeks
ASEHolder.4_weeks = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.4_weeks[i] = ASE
}
mean_windowed_ASE.4_weeks = mean(ASEHolder.4_weeks)
median_windowed_ASE.4_weeks = median(ASEHolder.4_weeks)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(4-week forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.4_weeks, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 12 # we forecast out 3 months, or 12 weeks
ASEHolder.3_months = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.3_months[i] = ASE
}
mean_windowed_ASE.3_months = mean(ASEHolder.3_months)
median_windowed_ASE.3_months = median(ASEHolder.3_months)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(3-month forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.3_months, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 26 # we forecast out 6 months, or 26 weeks
ASEHolder.6_months = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.6_months[i] = ASE
}
mean_windowedASE.6_months = mean(ASEHolder.6_months)
median_windowedASE.6_months = median(ASEHolder.6_months)
# visualization of windowed ASE over time
newASE = c(rep(NA, 131), ASEHolder.6_months) # this plots ASE from week 131 onward
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(6-month forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.6_months, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
forecast_horizon <- c("2 weeks", "4 weeks", "3 months", "6 months")
mean_rolling_window_ASE<- c(mean_windowed_ASE.2_weeks,mean_windowed_ASE.4_weeks, mean_windowed_ASE.3_months, mean_windowedASE.6_months)
median_rolling_window_ASE <- c(median_windowed_ASE.2_weeks, median_windowed_ASE.4_weeks, median_windowed_ASE.3_months, median_windowedASE.6_months)
rolling.window.ASE <- data.frame(forecast_horizon, mean_rolling_window_ASE, median_rolling_window_ASE)
formattable(rolling.window.ASE, digits = 4, format = "f")
library(rmdformats)    # for html formatting
library(tidyverse)     # data manipulaiton
library(tswge)         # Time series package
library(tseries)       # for Dickey-Fuller test
library(orcutt)        # for Cochrane-Orcutt test
library(formattable)   # for table formatting
knitr::opts_chunk$set(echo = TRUE,
prompt = FALSE,
tidy = TRUE,
comment = NA,
message = FALSE,
warning = FALSE)
library(readr)
# read in data
FluNetReport <- read_csv("../data/FluNetReport.csv")
# drop variables that are not of interest and rename for clarity
FluNetReport <- FluNetReport %>%
select(Week, SDATE, SPEC_PROCESSED_NB, ALL_INF) %>%
rename(wk_date.start = SDATE,
total_specimens.tested = SPEC_PROCESSED_NB,
total_flu_cases.positive = ALL_INF)
# add column for percent positive cases
FluNetReport = mutate(FluNetReport, total_flu_cases.percent_positive = total_flu_cases.positive/total_specimens.tested*100)
# convert data type from string to date
FluNetReport$wk_date.start <- as.Date(FluNetReport$wk_date.start, "%m/%d/%y")
# create time series of percent positive flu cases
ts_flu.percent_positive_cases <- ts(FluNetReport[ ,5], start=2010, frequency = 52)
# create a smaller sample using only the most recent five years of data (most recent 260 weeks)
most_recent_5_years.flu_positive_cases <- FluNetReport %>%
slice(tail(row_number(), 260))
# convert to time series object
ts.flu <- ts(most_recent_5_years.flu_positive_cases[ ,4], start=2010, frequency = 52)
# plot the data
invisible(plotts.sample.wge(ts.flu))
plot(ts.flu, main=c(paste("Weekly Flu Cases in the U.S."),
paste("from June 15, 2015 through June 07, 2020")), xlab="Weeks", ylab="Rate of Positive Flu Cases")
par(mar = c(5,5,2,5))
# plot weekly specimens
plot(most_recent_5_years.flu_positive_cases$wk_date.start,
most_recent_5_years.flu_positive_cases$total_flu_cases.positive,
las = 1,type = "l",
main=c(paste("Number Specimens Processed Each Week vs Weekly Rate of Positve Flu Cases in the U.S."),
paste("from June 15, 2015 through June 07, 2020")),
xlab="Weeks",
ylab="Specimens Processed")
par(new = T)
# plot flu positive rate
plot(most_recent_5_years.flu_positive_cases$total_flu_cases.percent_positive, type="l", lty=1, axes=F, ylab=NA, xlab=NA, col="orange")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Specimens Processed", "Percent Positive"), lty=c(1, 1), col=c("black", "orange"), cex=.6)
by_week <- most_recent_5_years.flu_positive_cases %>%
select(Week, total_flu_cases.positive) %>%
group_by(Week)
# get avearge number of cases for the week of each flu season
mean_weekly_cases <- by_week %>% summarise(mean_positive_cases = mean(total_flu_cases.positive))
# plot the mean cases by week for all flu seasons from 2015 through 2020
plot(mean_weekly_cases$Week,mean_weekly_cases$mean_positive_cases, type = "o", main = "Mean Number of Positive Flu Cases \n  15 June 2015 through 01 June 2020", xlab = "Flu Season Week Number", ylab = "Mean Rate")
# plot the data
invisible(plotts.sample.wge(ts_flu.percent_positive_cases))
# to compare the ACF structure of the first half of the data to the second half.
par(mfrow = c(1,2))
acf(ts.flu[1:130], main="First Half")
acf(ts.flu[131:260], main="Second Half")
# add column of log transformed data to datframe
log_data <- most_recent_5_years.flu_positive_cases %>%
mutate(log_flu=log(total_flu_cases.positive))
# convert to time series object
ts.log_flu <- ts(log_data[ ,6], start=2010, frequency = 52)
# plot the data
plot(ts.log_flu, main=c(paste("Log-transformed Weekly Flu Cases in the U.S."),
paste("from June 15, 2015 through June 07, 2020")), xlab="Weeks", ylab="log of Positive Flu Cases")
# to compare the ACF structure of the first half of the data to the second half.
par(mfrow = c(1,2))
acf(ts.log_flu[1:130], main="log_flu First Half")
acf(ts.log_flu[131:260], main="log_flu Second Half")
# plot the ACF and spectral densities
#invisible allows the plot to print, but supresses the output
invisible(acf(ts.log_flu, lag.max = 200))
# plot the ACF and spectral densities
# invisible allows the plot to print, but supresses the output
par(mfrow = c(1,2))
invisible(parzen.wge(ts.log_flu))
invisible(parzen.wge(ts.log_flu,trunc = 20))
# Check for stationarity using the Dickey-Fuller test
adf.test(ts.log_flu)
# Check for trend using Cochrane-Orcutt
df <- log_data[,c(2,6)]
x <- ts.log_flu
t = seq(1,260,1)
fit = lm(x~t, data = df)
# Cochrane-Orcutt test
#cfit = cochrane.orcutt(fit)
#summary(cfit)
formattable(invisible(aic5.wge(ts.log_flu, type = 'aic')))
formattable(invisible(aic5.wge(ts.log_flu, type = 'bic')))
params <- est.arma.wge(ts.log_flu, p=3, q=1)
# check residuals for white noise
plotts.sample.wge(params$res)
acf(params$res, lag.max = 60, main="ACF of Residuals")
ljung.wge(params$res, p = 3, q = 1)  # pval is > 0.05 and fails to reject the null hypothesis
# second check with different K-value
ljung.wge(params$res, p = 3, q = 1, K = 48)  # pval is > 0.05 and fails to reject the null hypothesis
f = fore.aruma.wge(ts.log_flu,
phi=params$phi,
theta=params$theta,
n.ahead = 52,
lastn = TRUE,
plot=TRUE,
limits=TRUE)
#Code from Prof. Sadler's Time Series Course Unit 7
#Model 1
phis = params$phi
thetas = params$theta
s  = 0
d  = 0
trainingSize = 130 # this is the window size (we used a window of 2.5 years or 130 weeks)
total_number_of_observations = 260
horizon = 2 # we forecast out 2 weeks
ASEHolder.2_weeks = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon, plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.2_weeks[i] = ASE
}
mean_windowed_ASE.2_weeks = mean(ASEHolder.2_weeks)
median_windowed_ASE.2_weeks = median(ASEHolder.2_weeks)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(2-week forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.2_weeks, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 4 # we forecast out 1 months, or 4 weeks
ASEHolder.4_weeks = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.4_weeks[i] = ASE
}
mean_windowed_ASE.4_weeks = mean(ASEHolder.4_weeks)
median_windowed_ASE.4_weeks = median(ASEHolder.4_weeks)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(4-week forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.4_weeks, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 12 # we forecast out 3 months, or 12 weeks
ASEHolder.3_months = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.3_months[i] = ASE
}
mean_windowed_ASE.3_months = mean(ASEHolder.3_months)
median_windowed_ASE.3_months = median(ASEHolder.3_months)
# visualization of windowed ASE over time
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(3-month forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.3_months, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
horizon = 26 # we forecast out 6 months, or 26 weeks
ASEHolder.6_months = numeric() # this is an empty varible that will hold all the ASE values
for( i in 1:(260-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(ts.log_flu[i:(i+(trainingSize-1))],
phi = phis, theta = thetas,
s = s, d = d, n.ahead = horizon,plot=FALSE)
ASE = mean((ts.log_flu[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder.6_months[i] = ASE
}
mean_windowedASE.6_months = mean(ASEHolder.6_months)
median_windowedASE.6_months = median(ASEHolder.6_months)
# visualization of windowed ASE over time
newASE = c(rep(NA, 131), ASEHolder.6_months) # this plots ASE from week 131 onward
par(mar = c(5,5,2,5))
plot(ts.log_flu, type="l", ylab='Flu Positive Rate', xlab='Time', las = 1, col="blue", main = 'Rolling Window ASE Over Time \n(6-month forecast)')
par(new = T)
# plot rolling window ASE
plot(ASEHolder.6_months, type="l", lty=2, axes=F, ylab=NA, xlab=NA, col="red")
# create tick marks and label on right vertical axis
axis(side=4, las=1)
# add ASE line
mtext(side=4, line=3, 'ASE')
# add legend
legend("topleft", legend=c("Obs. Value", "ASE"), lty=c(1, 2), col=c("blue", "red"), cex=.6)
forecast_horizon <- c("2 weeks", "4 weeks", "3 months", "6 months")
mean_rolling_window_ASE<- c(mean_windowed_ASE.2_weeks,mean_windowed_ASE.4_weeks, mean_windowed_ASE.3_months, mean_windowedASE.6_months)
median_rolling_window_ASE <- c(median_windowed_ASE.2_weeks, median_windowed_ASE.4_weeks, median_windowed_ASE.3_months, median_windowedASE.6_months)
rolling.window.ASE <- data.frame(forecast_horizon, mean_rolling_window_ASE, median_rolling_window_ASE)
formattable(rolling.window.ASE, digits = 4, format = "f")
formattable(as.tibble(rolling.window.ASE), digits = 4, format = "f")
formattable(as.tibble(rolling.window.ASE), digits = 4, format = "f")
# check residuals for white noise
invisible(plotts.sample.wge(params$res))
