births_forecast = fore.aruma.wge(births,
s=11,
n.ahead=12,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
s=12,
n.ahead=12,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d =1,
s=12,
n.ahead=12,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d = 2,
s=12,
n.ahead=12,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d = .5,
s=12,
n.ahead=12,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d = 0,
s=12,
n.ahead=12,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d = 0,
s=12,
n.ahead=24,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d = 0,
s=12,
n.ahead=48,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d = 3,
s=12,
n.ahead=48,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d = 2,
s=12,
n.ahead=48,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d = 1.5,
s=12,
n.ahead=48,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d = 1,
s=12,
n.ahead=48,
lastn=T,
limits=F)
births_forecast = fore.aruma.wge(births,
d = 0,
s=12,
n.ahead=48,
lastn=T,
limits=F)
```{r}
df_amtrak <- read.csv("https://raw.githubusercontent.com/BivinSadler/MSDS-6373-Time-Series/master/Unit%207/AmtrakPassengersMonthly.csv")
```
```{r}
df_amtrak <- read.csv('https://raw.githubusercontent.com/BivinSadler/MSDS-6373-Time-Series/master/Unit%207/AmtrakPassengersMonthly.csv',
header = TRUE,
sep = ,)
```
births_forecast = fore.sigplusnoise.wge(births,
linear = T,
freq = 0,
max.p = 5,
n.ahead=48,
lastn=T,
plot = T
limits=F)
births_forecast = fore.sigplusnoise.wge(births,
linear = T,
freq = 0,
max.p = 5,
n.ahead=48,
lastn=T,
plot = T,
limits=F)
births_forecast = fore.sigplusnoise.wge(births,
linear = T,
freq = 0,
max.p = 5,
n.ahead=10,
lastn=T,
plot = T,
limits=F)
births_forecast = fore.sigplusnoise.wge(births,
linear = T,
d = 0,
freq = 0,
max.p = 5,
n.ahead=10,
lastn=T,
plot = T,
limits=F)
births_forecast = fore.sigplusnoise.wge(births,
linear = T,
freq = 0,
max.p = 5,
n.ahead=10,
lastn=T,
plot = T,
limits=F)
births_forecast = fore.sigplusnoise.wge(births,
linear = T,
n.ahead=48,
lastn=F,
limits=F)
```{r}
psi.weights.wge(phi=c(1.7, -.72),lag.max=5)
```
```{r}
psi.weights.wge(phi=c(1.7, -.72))
```
data("llynx")
lynx_forecast = fore.arma.wge(llynx,
phi = c(1.3, -0.7, 0.1, -0.2),
n.ahead = 12,
limits = F)
lynx_forecast = fore.arma.wge(llynx,
phi = c(1.3, -0.7, 0.1, -0.2),
n.ahead = 12,
lastn = T,
limits = F)
ASE = (lynx_forecast$f-llynx[103:114]^2)
ASE
ASE = mean((lynx_forecast$f-llynx[103:114]^2))
ASE
lynx_forecast = fore.arma.wge(llynx,
phi = c(1.3, -0.7, 0.1, -0.2),
n.ahead = 12,
lastn = TRUE,
limits = FALSE)
ASE = mean((lynx_forecast$f-llynx[103:114]^2))
ASE
View(lynx_forecast)
```{r}
df_amtrak <- read.table('https://raw.githubusercontent.com/BivinSadler/MSDS-6373-Time-Series/master/Unit%207/AmtrakPassengersMonthly.csv',
header = TRUE,
sep = ,)
```
```{r}
filelocation <- 'https://raw.githubusercontent.com/BivinSadler/MSDS-6373-Time-Series/master/Unit%207/AmtrakPassengersMonthly.csv'
df_amtrak <- read.csv(url(filelocation))
```
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(tidyverse)
```{r}
filelocation <- 'https://raw.githubusercontent.com/BivinSadler/MSDS-6373-Time-Series/master/Unit%207/AmtrakPassengersMonthly.csv'
df_amtrak <- read.csv(url(filelocation))
```
```{r}
filelocation <- 'https://raw.githubusercontent.com/BivinSadler/MSDS-6373-Time-Series/master/Unit%207/AmtrakPassengersMonthly.csv'
df_amtrak <- read.csv(url(filelocation))
```
knitr::opts_chunk$set(echo = TRUE)
library(tswge)
library(tidyverse)
psi.weights.wge(phi=c(1.7, -.72))
psi.weights.wge(phi=c(1.7, -.72), lag.max = 5)
filelocation <- 'https://raw.githubusercontent.com/BivinSadler/MSDS-6373-Time-Series/master/Unit%207/AmtrakPassengersMonthly.csv'
df_amtrak <- read.csv(url(filelocation))
View(df_amtrak)
df_amtrak$X <- NULL
df_amtrak$X.1 <- NULL
df_amtrak$X.2 <- NULL
View(df_amtrak)
ASE
# Model 1
forecast_model1 <- fore.arma.wge(df_amtrak,
phi = c(0.5511, 0.1680, -0.0145, 0.0651, 0.1388, -0.2966, 0.1539, 0.1270, -0.1815, 0.0364, 0.1456, 0.6287, -0.3832, -0.0199, -0.1679),
n.ahead = 12,
lastn = T,
limits = T)
# Model 1
forecast_model1 <- fore.arma.wge(df_amtrak,
phi = c(0.5511, 0.1680, -0.0145, 0.0651, 0.1388, -0.2966, 0.1539, 0.1270, -0.1815, 0.0364, 0.1456, 0.6287, -0.3832, -0.0199, -0.1679),
n.ahead = 12,
lastn = T,
limits = T)
# Model 1
forecast_model1 <- fore.arma.wge(df_amtrak$Ridership,
phi = c(0.5511, 0.1680, -0.0145, 0.0651, 0.1388, -0.2966, 0.1539, 0.1270, -0.1815, 0.0364, 0.1456, 0.6287, -0.3832, -0.0199, -0.1679),
n.ahead = 12,
lastn = T,
limits = T)
ASE = mean((forecast_model1$f-llynx[142:159]^2))
ASE = mean((forecast_model1$f-df_amtrak[142:159]^2))
ASE = mean((forecast_model1$f-df_amtrak$Ridership[142:159]^2))
ASE
forecast_model1$f
ASE = mean((forecast_model1$f-df_amtrak$Ridership[141:159]^2))
ASE
data("llynx")
plotts.wge(llynx)
df_amtrak <- ts(df_amtrak)
# Model 1
forecast_model1 <- fore.arma.wge(df_amtrak$Ridership,
phi = c(0.5511, 0.1680, -0.0145, 0.0651, 0.1388, -0.2966, 0.1539, 0.1270, -0.1815, 0.0364, 0.1456, 0.6287, -0.3832, -0.0199, -0.1679),
n.ahead = 12,
lastn = T,
limits = T)
# Model 1
forecast_model1 <- fore.arma.wge(df_amtrak,
phi = c(0.5511, 0.1680, -0.0145, 0.0651, 0.1388, -0.2966, 0.1539, 0.1270, -0.1815, 0.0364, 0.1456, 0.6287, -0.3832, -0.0199, -0.1679),
n.ahead = 12,
lastn = T,
limits = T)
ASE = mean((forecast_model1$f-df_amtrak[141:159]^2))
ASE
ASE = mean((forecast_model1$f-df_amtrak[143:159]^2))
ASE
ASE = mean((forecast_model1$f-df_amtrak[148:159]^2))
ASE
# Model 1
forecast_model1 <- fore.arma.wge(df_amtrak,
phi = c(0.5511, 0.1680, -0.0145, 0.0651, 0.1388, -0.2966, 0.1539, 0.1270, -0.1815, 0.0364, 0.1456, 0.6287, -0.3832, -0.0199, -0.1679),
n.ahead = 12,
lastn = T,
limits = T)
ASE = mean((forecast_model1$f-df_amtrak[148:159]^2))
ASE
# Model 1
forecast_model1 <- fore.arma.wge(df_amtrak,
phi = c(0.5511, 0.1680, -0.0145, 0.0651, 0.1388, -0.2966, 0.1539, 0.1270, -0.1815, 0.0364, 0.1456, 0.6287, -0.3832, -0.0199, -0.1679),
n.ahead = 12,
lastn = T,
limits = T)
Model1_ASE = mean((forecast_model1$f-df_amtrak[148:159]^2))
Model1_ASE
# Model 2
forecast_model2 <- fore.arma.wge(df_amtrak,
phi = c(-0.02709541,  0.74213105),
theta = c(-0.5844596,  0.3836931),
n.ahead = 12,
lastn = T,
limits = T)
Model2_ASE = mean((forecast_model1$f-df_amtrak[148:159]^2))
Model2_ASE
# Model 2
forecast_model2 <- fore.arma.wge(df_amtrak,
phi = c(-0.02709541,  0.74213105),
theta = c(-0.5844596,  0.3836931),
n.ahead = 12,
lastn = T,
limits = T)
Model2_ASE = mean((forecast_model2$f-df_amtrak[148:159]^2))
Model2_ASE
# Model 3
forecast_model3 <- fore.arma.wge(df_amtrak,
phi = 0.306943,
theta = 0.7431719,
n.ahead = 12,
lastn = T,
limits = T)
Model3_ASE = mean((forecast_model3$f-df_amtrak[148:159]^2))
Model3_ASE
gen.sigplusnoise.wge(200,coef = c(5,0),freq = c(.1,0), vara = 10, sn = 1)
library(tswge)
library(tidyverse)
gen.sigplusnoise.wge(200,coef = c(5,0),freq = c(.1,0), vara = 10, sn = 1)
ma = filter(Realization,rep(1,5))/5
Realization = gen.sigplusnoise.wge(200,coef = c(5,0),freq = c(.1,0), vara = 10, sn = 1)
ma = filter(Realization,rep(1,5))/5
rm(Realization)
# to find gamma_hat_naught if given x values
# ex: find gamma_hat_naught given x_1 = 6, x_2 = 8,
# x_3 = 13, x_4 = 12, x_5 = 10, x_6 = 7, x_7 = 4, x_8 = 2
x = c(6, 8, 13, 12, 10, 7, 4, 2)
var(x)*7/8
# calculate p_hat_1 and how many pairs were used to find this estimate.
plotts.sample.wge(x)
library(tswge)
library(tidyverse)
x <- c(5,9,13,15,14,10,12,17,20,25)
phi1 <- 1.65
phi2 <- -1.06
phi3 <- .262
psi.weights.wge(phi = c(phi1, phi2, phi3), lag.max = 5)
x <- c(5,9,13,15,14,10,12,17,20,25)
phi_1 <- 1.65
phi_2 <- -1.06
phi_3 <- .262
psi_values <- psi.weights.wge(phi = c(phi_1, phi_2, phi_3), lag.max = 5)
psi_0 <- 1
psi_1 <- psi_values[1]
psi_2 <- psi_values[2]
psi_3 <- psi_values[3]
psi_4 <- psi_values[4]
psi_5 <- psi_values[5]
whiteNoise_Var <- fore.arma.wge(x, phi = c(phi1, phi2, phi3), n.ahead = 4, lastn = FALSE,limits = FALSE)$wnv
whiteNoise_Var <- fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = FALSE)$wnv
fore.arma.wge(x, phi = c(phi1, phi2, phi3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[2]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[2]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[3]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ll[2]
fcast[3] + Half_Width
fcast <- fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$f
fcast[3] + Half_Width
fcast[3] + HalfWidth
HalfWidth <- 1.96 * sqrt(whiteNoise_Var) * sqrt(psi_0^2 + psi_1^2)
fcast[3] + HalfWidth
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[3]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 3, lastn = FALSE,limits = TRUE)$ul[3]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[3]
HalfWidth <- 1.96 * sqrt(whiteNoise_Var) * sqrt(psi_1^2 + psi_2^2)
fcast[3] + HalfWidth
fcast <- fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$f
fcast[3] + HalfWidth
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[3]
HalfWidth <- 1.96 * sqrt(whiteNoise_Var) * sqrt(psi_2^2 + psi_3^2)
fcast[3] + HalfWidth
HalfWidth <- 1.96 * sqrt(whiteNoise_Var) * sqrt(psi_0^2 + psi_2^2)
fcast <- fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$f
fcast[3] + HalfWidth
HalfWidth <- 1.96 * sqrt(whiteNoise_Var) * sqrt(psi_0^2 + psi_1^2 + psi_2^2)
fcast <- fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$f
fcast[3] + HalfWidth
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[3]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ll[3]
HalfWidth <- 1.96 * sqrt(whiteNoise_Var) * sqrt(psi_0^2)
fcast <- fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$f
fcast[1] + HalfWidth
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[3]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ll[3]
whiteNoise_Var <- fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = FALSE)$wnv
HalfWidth <- 1.96 * sqrt(whiteNoise_Var) * sqrt(psi_0^2)
fcast <- fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$f
fcast[1] + HalfWidth
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[3]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ll[3]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[1]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ll[1]
HalfWidth_1 <- 1.96 * sqrt(whiteNoise_Var) * sqrt(psi_0^2)
HalfWidth_2 <- 1.96 * sqrt(whiteNoise_Var) * sqrt(psi_0^2 + psi_1^2)
HalfWidth_3 <- 1.96 * sqrt(whiteNoise_Var) * sqrt(psi_0^2 + psi_1^2 + psi_2^2)
fcast <- fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$f
fcast[1] + HalfWidth_1 # upper limit
fcast[1] - HalfWidth_1 # lower limit
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[1]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ll[1]
fcast[2] + HalfWidth_2 # upper limit
fcast[2] - HalfWidth_2 # lower limit
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[2]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ll[2]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[1]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ll[1]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[2]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ll[2]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ul[3]
fore.arma.wge(x, phi = c(phi_1, phi_2, phi_3), n.ahead = 4, lastn = FALSE,limits = TRUE)$ll[3]
# count items in list
n <- length(x)
# calculate gamma_0
gamma_0 = var(x)*(n-1/n)
gamma_0
n
var(x)*9/10
# calculate gamma_0
gamma_0 = var(x)*(n-1)/n
gamma_0
# find the autocorrelation (rho) of a specific lag (e.g., rho_7)
acf(x, plot = FALSE)
# find the covariance of a particular lag
acf(x, type="covariance", plot = FALSE)
# find the autocorrelation (rho) of a specific lag (e.g., rho_7)
acf(x, plot = FALSE)
gamma_0
?acf
# calculate the covariance of a particular lag given the autocorrelations (e.g., find gamma_7)
acf(x, lag = 7)
# find the autocorrelation (rho) of a specific lag (e.g., rho_7)
acf(x, plot = FALSE)
# find the autocorrelation (rho) of a specific lag (e.g., rho_7)
rho_values <- acf(x, plot = FALSE)
# calculate the covariance of a particular lag given the autocorrelations (e.g., find gamma_7)
rho_values[7]
rho_values
# calculate the covariance of a particular lag given the autocorrelations (e.g., find gamma_7)
rho_7 <- rho_values[7]
gamma_7 <- rho_7 / gamma_0
# calculate gamma_0 (covariance of lag 0)
gamma_0 = var(x)*(n-1)/n
gamma_0
# calculate the covariance of a particular lag given the autocorrelations (e.g., find gamma_7)
rho_7 <- rho_values[7]
gamma_7 <- rho_7 / gamma_0
# calculate the covariance of a particular lag given the autocorrelations (e.g., find gamma_7)
rho_7 <- as.numeric(rho_values[7])
# calculate the covariance of a particular lag given the autocorrelations (e.g., find gamma_7)
rho_values[7]
gamma_7 <- -0.231 / gamma_0
gamma_7
# verify the covariance of a particular lag
acf(x, type="covariance", plot = FALSE)
gamma_0
rho_values
# calculate the covariance of a particular lag given the autocorrelations (e.g., find gamma_7)
rho_values[7]
gamma_7 <- -0.231 * gamma_0
gamma_7
# verify the covariance of a particular lag
acf(x, type="covariance", plot = FALSE)
a=acf(x)
a$acf
a$acf[2]
a$acf[7]
a$acf[8] - a$acf[1]
a$acf[1] - a$acf[8]
a$acf[1] + a$acf[8]
knitr::opts_chunk$set(echo = TRUE)
library(rmdformats)
library(tswge)
library(tidyverse)
url <- 'https://raw.githubusercontent.com/BivinSadler/MSDS-6373-Time-Series/master/Unit%208/midterm2020.csv'
df.midterm <- read_html(url)
df.midterm <- read.csv('https://raw.githubusercontent.com/BivinSadler/MSDS-6373-Time-Series/master/Unit%208/midterm2020.csv',
fill = TRUE,
header = TRUE,
sep = ",")
View(df.midterm)
ts.x <- ts(df.midterm)
plotts.wge(ts.x)
View(ts.x)
plotts.wge(df.midterm)
plotts.wge(ts.x)
acf(ts.x)
acf(ts.x)
phi_values = c(1.6, -0.9)
x = gen.arma.wge(n  = 200,
phi = phi_values,
vara = 2,
sn = 33)
library(tswge)
library(tidyverse)
phi_values = c(1.6, -0.9)
x = gen.arma.wge(n  = 200,
phi = phi_values,
vara = 2,
sn = 33)
plotts.wge(x)
# Yule-Walker estimates
est.ar.wge(x, p = 2, type = 'yw')
# Yule-Walker estimates
x.yw = est.ar.wge(x, p = 2, type = 'yw')
x.yw
# Burg estimates
x.burg = est.ar.wge(x, p = 2, type = 'burg')
x.burg
$phi
x.burg$phi
x.yw$phi
#MLE estimates
x.mle = est.ar.wge(x, p = 2, type = 'mle')
x.mle
phi_values = c(0.3, -0.7)
theta_values = -0.4
x = gen.arma.wge(n  = 200,
phi = phi_values,
theta = theta_values,
vara = 4,
sn = 27)
x.burg = est.ar.wge(x, p = 2, type = 'burg')
x.burg
phi_values = c(0.3, -0.7)
theta_values = -0.4
x = gen.ar.wge(n  = 200,
phi = phi_values,
vara = 4,
sn = 27)
x.burg = est.arma.wge(x, p = 2, type = 'burg')
x.burg
x.burg = est.ar.wge(x, p = 2, type = 'burg')
x.burg
phi_values = c(0.3, -0.7)
x = gen.ar.wge(n  = 200,
phi = phi_values,
vara = 4,
sn = 27)
x.burg = est.ar.wge(x, p = 2, type = 'burg')
x.burg
setwd(dir'Users/User/Dropbox/_SMU')
setwd(dir'Users/User/Dropbox/')f
setwd(dir'Users/User/Dropbox')
setwd(dir='Users/User/Dropbox')
setwd(dir='C:Users/User/Dropbox')
getwd()
setwd(dir='C:/Users/User/Dropbox')
setwd("C:/Users/User/Dropbox/_SMU/MSDS_7333_QTW/CaseStudies/DS7333/models")
